/* SPDX-License-Identifier: Apache-2.0 OR MIT */
/* See https://github.com/landlock-lsm/landlockconfig */
/* Auto-generated by cbindgen. */

#ifndef LANDLOCKCONFIG_H
#define LANDLOCKCONFIG_H

#include <stdint.h>

struct landlockconfig;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Parses a JSON configuration file
 *
 * # Parameters
 *
 * * `config_fd`: A file descriptor referring to a JSON configuration file.
 * * `flags`: Must be 0.
 *
 * # Return values
 *
 * * Pointer to a landlockconfig object on success. This object must be freed
 *   with landlockconfig_free().
 * * -errno on error.
 */
struct landlockconfig *landlockconfig_parse_json_file(int config_fd, uint32_t flags);

/**
 * Parses a TOML configuration file
 *
 * # Parameters
 *
 * * `config_fd`: A file descriptor referring to a TOML configuration file.
 * * `flags`: Must be 0.
 *
 * # Return values
 *
 * * Pointer to a landlockconfig object on success. This object must be freed
 *   with landlockconfig_free().
 * * -errno on error.
 */
struct landlockconfig *landlockconfig_parse_toml_file(int config_fd, uint32_t flags);

/**
 * Parses a JSON configuration from a memory buffer
 *
 * # Parameters
 *
 * * `buffer_ptr`: Pointer to the buffer containing JSON data.
 * * `buffer_size`: Size of the buffer in bytes, or 0 if `buffer_ptr` is null-terminated.
 * * `flags`: Must be 0.
 *
 * # Return values
 *
 * * Pointer to a landlockconfig object on success. This object must be freed
 *   with landlockconfig_free().
 * * -errno on error.
 */
struct landlockconfig *landlockconfig_parse_json_buffer(const uint8_t *buffer_ptr,
                                                        uintptr_t buffer_size,
                                                        uint32_t flags);

/**
 * Parses a TOML configuration from a memory buffer
 *
 * # Parameters
 *
 * * `buffer_ptr`: Pointer to the buffer containing TOML data.
 * * `buffer_size`: Size of the buffer in bytes, or 0 if `buffer_ptr` is null-terminated.
 * * `flags`: Must be 0.
 *
 * # Return values
 *
 * * Pointer to a landlockconfig object on success. This object must be freed
 *   with landlockconfig_free().
 * * -errno on error.
 */
struct landlockconfig *landlockconfig_parse_toml_buffer(const uint8_t *buffer_ptr,
                                                        uintptr_t buffer_size,
                                                        uint32_t flags);

/**
 * Parses all JSON configuration files in a directory
 *
 * # Parameters
 *
 * * `dir_path`: A pointer to a null-terminated string containing the directory path.
 * * `flags`: Must be 0.
 *
 * # Return values
 *
 * * Pointer to a landlockconfig object on success. This object must be freed
 *   with landlockconfig_free().
 * * -errno on error.
 */
struct landlockconfig *landlockconfig_parse_json_directory(const char *dir_path, uint32_t flags);

/**
 * Parses all TOML configuration files in a directory
 *
 * # Parameters
 *
 * * `dir_path`: A pointer to a null-terminated string containing the directory path.
 * * `flags`: Must be 0.
 *
 * # Return values
 *
 * * Pointer to a landlockconfig object on success. This object must be freed
 *   with landlockconfig_free().
 * * -errno on error.
 */
struct landlockconfig *landlockconfig_parse_toml_directory(const char *dir_path, uint32_t flags);

/**
 * Frees a landlockconfig object
 *
 * # Safety
 *
 * The pointer must have been returned by landlockconfig_parse_*().
 */
void landlockconfig_free(struct landlockconfig *config);

/**
 * Creates a ruleset from a landlockconfig object
 *
 * # Parameters
 *
 * * `config`: A pointer to a landlockconfig object.
 * * `flags`: Must be 0.
 *
 * # Safety
 *
 * `config` must have been returned by landlockconfig_parse_json() or
 * landlockconfig_parse_toml().
 *
 * # Returns
 *
 * * The ruleset file descriptor on success.
 * * -errno on error.
 */
int landlockconfig_build_ruleset(const struct landlockconfig *config, uint32_t flags);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* LANDLOCKCONFIG_H */
